// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InBrainSurveys
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import InBrainSurveys
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol InBrainDelegate {
  @objc optional func didReceiveInBrainRewards(rewardsArray: [InBrainSurveys.InBrainReward])
  @objc optional func didFailToReceiveRewards(error: Swift.Error)
  @objc optional func surveysClosed(byWebView: Swift.Bool, completedSurvey: Swift.Bool, rewards: [InBrainSurveys.InBrainSurveyReward]?)
  @available(*, deprecated, renamed: "surveysClosed(byWebView:completedSurvey:rewards:)")
  @objc optional func surveysClosed(byWebView: Swift.Bool, completedSurvey: Swift.Bool)
  @available(*, unavailable, renamed: "surveysClosed(byWebView:completedSurvey:)")
  @objc optional func surveysClosedFromPage()
  @available(*, unavailable, renamed: "surveysClosed(byWebView:completedSurvey:)")
  @objc optional func surveysClosed()
}
@objc public protocol NativeSurveyDelegate {
  @objc func nativeSurveysLoadingStarted(filter: InBrainSurveys.InBrainSurveyFilter?)
  @objc func nativeSurveysReceived(_ surveys: [InBrainSurveys.InBrainNativeSurvey], filter: InBrainSurveys.InBrainSurveyFilter?)
  @objc func failedToReceiveNativeSurveys(error: Swift.Error, filter: InBrainSurveys.InBrainSurveyFilter?)
  @objc @available(*, unavailable, renamed: "nativeSurveysLoadingStarted(filter:)")
  func nativeSurveysLoadingStarted()
  @objc @available(*, unavailable, renamed: "nativeSurveysLoadingStarted(filter:)")
  func nativeSurveysLoadingStarted(placementId: Swift.String?)
  @objc @available(*, unavailable, renamed: "nativeSurveysReceived(surveys:filter:)")
  func nativeSurveysReceived(_ surveys: [InBrainSurveys.InBrainNativeSurvey])
  @objc @available(*, unavailable, renamed: "nativeSurveysReceived(surveys:filter:)")
  func nativeSurveysReceived(_ surveys: [InBrainSurveys.InBrainNativeSurvey], placementId: Swift.String?)
  @objc @available(*, unavailable, renamed: "failedToReceiveNativeSurveys(error:filter:)")
  func failedToReceiveNativeSurveys(error: Swift.Error)
  @objc @available(*, unavailable, renamed: "failedToReceiveNativeSurveys(error:filter:)")
  func failedToReceiveNativeSurveys(error: Swift.Error, placementId: Swift.String?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class InBrain : ObjectiveC.NSObject {
  @objc public static let shared: InBrainSurveys.InBrain
  @objc weak final public var inBrainDelegate: InBrainSurveys.InBrainDelegate?
  @objc weak final public var nativeSurveysDelegate: InBrainSurveys.NativeSurveyDelegate?
  @objc final public var isOnScreen: Swift.Bool {
    @objc get
  }
  @objc final public func setInBrain(apiClientID: Swift.String, apiSecret: Swift.String, isS2S: Swift.Bool)
  @objc final public func setInBrain(apiClientID: Swift.String, apiSecret: Swift.String, isS2S: Swift.Bool, userID: Swift.String?)
  @objc final public func set(userID: Swift.String?)
  final public func setNavigationBarTitle(_ title: Swift.String)
  @available(swift, obsoleted: 0.1)
  @objc final public func setNavigationBarTitle(_ title: Swift.String?)
  @objc final public func setNavigationBarConfig(_ config: InBrainSurveys.InBrainNavBarConfig)
  @objc final public func setStatusBarConfig(_ config: InBrainSurveys.InBrainStatusBarConfig)
  @objc final public func setSessionID(_ sessionID: Swift.String?)
  @objc final public func setDataOptions(_ dataOptions: [[Swift.String : Any]]?)
  @objc final public func checkForAvailableSurveys(completion: @escaping ((_ hasSurveys: Swift.Bool, _ error: Swift.Error?) -> (Swift.Void)))
  @objc final public func showSurveys(from viewController: UIKit.UIViewController? = nil)
  @objc final public func getRewards(success: @escaping ([InBrainSurveys.InBrainReward]) -> (), failed: @escaping InBrainSurveys.ErrorCallback)
  @objc final public func getRewards()
  @objc final public func confirmRewards(txIdArray: [Swift.Int])
  @objc final public func getCurrencySale(success: @escaping (InBrainSurveys.InBrainCurrencySale?) -> (), failed: @escaping InBrainSurveys.ErrorCallback)
  @objc final public func getNativeSurveys(filter: InBrainSurveys.InBrainSurveyFilter? = nil)
  @objc final public func getNativeSurveys(filter: InBrainSurveys.InBrainSurveyFilter? = nil, success: @escaping ([InBrainSurveys.InBrainNativeSurvey]) -> (), failed: @escaping InBrainSurveys.ErrorCallback)
  @objc final public func showNativeSurvey(_ survey: InBrainSurveys.InBrainNativeSurvey, from viewController: UIKit.UIViewController? = nil)
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String, searchId: Swift.String, from viewController: UIKit.UIViewController? = nil)
  @available(*, deprecated, message: "The function is deprecate and will be removed soon!")
  @objc final public func setLanguage(_ language: Swift.String) throws
  @available(*, deprecated, message: "Please, use setSessionID(_:) and setDataOptions(_:)")
  @objc final public func setInBrainValuesFor(sessionID: Swift.String?, dataOptions: [[Swift.String : Any]]?)
  @available(*, deprecated, renamed: "getNativeSurveys(filter:)")
  @objc final public func getNativeSurveys(placementId: Swift.String? = nil)
  @available(*, deprecated, renamed: "getNativeSurveys(filter:success:failed:)")
  @objc final public func getNativeSurveys(placementID: Swift.String? = nil, success: @escaping ([InBrainSurveys.InBrainNativeSurvey]) -> (), failed: @escaping InBrainSurveys.ErrorCallback)
  @available(*, unavailable, message: "Please, use separate setLanguage(from:) function")
  @objc final public func setInBrain(apiClientID: Swift.String, apiSecret: Swift.String, isS2S: Swift.Bool, userID: Swift.String?, language: Swift.String)
  @available(*, unavailable, renamed: "setLanguage(_:)")
  @objc final public func setLanguage(value: Swift.String)
  @available(*, unavailable, renamed: "showSurveys(from:)")
  @objc final public func showSurveys()
  @available(*, unavailable, renamed: "getNativeSurveys(filter:)")
  @objc final public func getNativeSurveys()
  @available(*, unavailable, renamed: "getNativeSurveys(filter:success:failed:)")
  @objc final public func getNativeSurveys(success: @escaping ([InBrainSurveys.InBrainNativeSurvey]) -> (), failed: @escaping InBrainSurveys.ErrorCallback)
  @available(*, unavailable, renamed: "showNativeSurveyWith(id:searchId:from:)")
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String, placementId: Swift.String? = nil, from viewController: UIKit.UIViewController? = nil)
  @available(*, unavailable, renamed: "showNativeSurveyWith(id:searchId:from:)")
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String)
  @available(*, unavailable, renamed: "showNativeSurveyWith(id:searchId:from:)")
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String, from viewController: UIKit.UIViewController)
  @objc deinit
}
@objc public enum InBrainSurveyCategory : Swift.Int {
  case automotive = 1
  case beveragesAlcoholic
  case beveragesNonAlcoholic
  case business
  case childrenAndParenting = 5
  case coalitionLoyaltyPrograms
  case destinationsAndTourism
  case education
  case electronicsComputerSoftware
  case entertainmentAndLeisure = 10
  case financeBankingInvestingAndInsurance
  case food
  case gamblingLottery
  case governmentAndPolitics
  case healthCare = 15
  case home
  case mediaAndPublishing
  case personalCare
  case restaurants
  case sensitiveExplicitContent = 20
  case smokingTobacco
  case socialResearch
  case sportsRecreationFitness
  case telecommunications
  case transportation = 25
  case travelAirlines
  case travelHotels
  case travelServicesAgencyBooking
  case creditCards
  case videoGames = 30
  case fashionAndClothingOther
  case fashionAndClothingDepartmentStore
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension InBrainSurveys.InBrainSurveyCategory : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public class InBrainNavBarConfig : ObjectiveC.NSObject {
  @objc public init(backgroundColor: UIKit.UIColor? = nil, buttonsColor: UIKit.UIColor? = nil, titleColor: UIKit.UIColor? = nil, isTranslucent: Swift.Bool = false, hasShadow: Swift.Bool = false)
  @objc deinit
}
@objc public class InBrainNativeSurvey : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let searchId: Swift.String
  final public let categories: [InBrainSurveys.InBrainSurveyCategory]?
  @available(swift, obsoleted: 0.1)
  @objc public var categoryIds: [Swift.Int]? {
    @objc get
  }
  @objc final public let rank: Swift.Int
  @objc final public let time: Swift.Int
  @objc final public let value: Swift.Double
  @objc final public let conversionLevel: InBrainSurveys.SurveyConversionLevel
  @objc final public let currencySale: Swift.Bool
  @objc final public let multiplier: Swift.Double
  @available(*, deprecated, message: "Parameter is deprecated and will be removed soon!.")
  @objc public var profileMatch: InBrainSurveys.SurveyProfileMatch {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc final public class InBrainSurveyFilter : ObjectiveC.NSObject {
  @objc final public let placementId: Swift.String?
  final public let categories: Swift.Set<InBrainSurveys.InBrainSurveyCategory>?
  final public let excludedCategories: Swift.Set<InBrainSurveys.InBrainSurveyCategory>?
  @available(swift, obsoleted: 0.1)
  @objc final public var categoryIds: [Swift.Int]? {
    @objc get
  }
  @available(swift, obsoleted: 0.1)
  @objc final public var excludedCategoryIds: [Swift.Int]? {
    @objc get
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @available(swift, obsoleted: 0.1)
  @objc convenience public init?(placementId: Swift.String?, categoryIDs: [Swift.Int]?, excludedCategoryIDs: [Swift.Int]?)
  public init?(placementId: Swift.String?, categories: [InBrainSurveys.InBrainSurveyCategory]?, excludedCategories: [InBrainSurveys.InBrainSurveyCategory]?)
  @objc deinit
}
@objc final public class InBrainCurrencySale : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let title: Swift.String
  @objc final public let multiplier: Swift.Double
  @objc final public let start: Foundation.Date
  @objc final public let end: Foundation.Date
  @objc override final public var description: Swift.String {
    @objc get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc public class InBrainStatusBarConfig : ObjectiveC.NSObject {
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle, hideStatusBar: Swift.Bool)
  @objc deinit
}
public typealias ErrorCallback = (Swift.Error) -> ()
@objc public enum SurveyConversionLevel : Swift.Int, Swift.Decodable {
  case newSurvey = 0
  case veryPoorConversion
  case poorConversion
  case fairConversion
  case goodConversion
  case veryGoodConversion
  case excellentConversion
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension InBrainSurveys.SurveyConversionLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum SurveyOutcomeType : Swift.Int, Swift.Decodable {
  case completed = 0
  case terminated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension InBrainSurveys.SurveyOutcomeType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc final public class InBrainSurveyReward : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let surveyId: Swift.String
  @objc final public let placementId: Swift.String?
  final public let categories: [InBrainSurveys.InBrainSurveyCategory]?
  @available(swift, obsoleted: 0.1)
  @objc final public var categoryIds: [Swift.Int]? {
    @objc get
  }
  @objc final public let userReward: Swift.Double
  @objc final public let outcomeType: InBrainSurveys.SurveyOutcomeType
  @objc override final public var description: Swift.String {
    @objc get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@available(*, deprecated, message: "Deprecated and will be removed soon!.")
@objc public enum SurveyProfileMatch : Swift.Int {
  case newSurvey = 0
  case poorMatch
  case fairMatch
  case goodMatch
  case greatMatch
  case excellentMatch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class InBrainReward : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let transactionId: Swift.Int
  @objc final public let amount: Swift.Float
  @objc final public let currency: Swift.String
  @objc final public let transactionType: Swift.Int
  @objc override final public var description: Swift.String {
    @objc get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension InBrainSurveys.InBrainSurveyCategory : Swift.Equatable {}
extension InBrainSurveys.InBrainSurveyCategory : Swift.Hashable {}
extension InBrainSurveys.InBrainSurveyCategory : Swift.RawRepresentable {}
extension InBrainSurveys.SurveyConversionLevel : Swift.Equatable {}
extension InBrainSurveys.SurveyConversionLevel : Swift.Hashable {}
extension InBrainSurveys.SurveyConversionLevel : Swift.RawRepresentable {}
extension InBrainSurveys.SurveyOutcomeType : Swift.Equatable {}
extension InBrainSurveys.SurveyOutcomeType : Swift.Hashable {}
extension InBrainSurveys.SurveyOutcomeType : Swift.RawRepresentable {}
@available(*, deprecated, message: "Deprecated and will be removed soon!.")
extension InBrainSurveys.SurveyProfileMatch : Swift.Equatable {}
@available(*, deprecated, message: "Deprecated and will be removed soon!.")
extension InBrainSurveys.SurveyProfileMatch : Swift.Hashable {}
@available(*, deprecated, message: "Deprecated and will be removed soon!.")
extension InBrainSurveys.SurveyProfileMatch : Swift.RawRepresentable {}
